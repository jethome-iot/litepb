syntax = "proto3";

package litepb.rpc;

import "google/protobuf/descriptor.proto";

// Call direction enum for RPC methods
enum CallDirection {
  // Traditional client-to-server RPC call
  CLIENT_TO_SERVER = 0;
  // Server-to-client call (typically for events/notifications)
  SERVER_TO_CLIENT = 1;
  // Bidirectional - can be called from either side
  BIDIRECTIONAL = 2;
}

// Custom options for RPC method configuration.
// These extend google.protobuf.MethodOptions to provide LitePB-specific metadata.
extend google.protobuf.MethodOptions {
  // method_id is a unique numeric identifier for this RPC method within the service.
  // Required to identify methods in the wire protocol.
  // Must be unique within the service. Recommended range: 1-65535.
  // Example: option (litepb.rpc.method_id) = 1;
  uint32 method_id = 50004;
  
  // default_timeout_ms sets the default timeout for this RPC call in milliseconds.
  // Can be overridden per-call at runtime. A value of 0 means no timeout.
  // Default: Implementation-defined (typically 5000ms)
  // Example: option (litepb.rpc.default_timeout_ms) = 3000;
  uint32 default_timeout_ms = 50003;
  
  // direction specifies the call direction for the method
  // Default: CLIENT_TO_SERVER (traditional RPC)
  // Example: option (litepb.rpc.direction) = SERVER_TO_CLIENT;
  CallDirection direction = 50007;
  
  // is_event marks this method as an event (no response expected)
  // Events are typically void/empty return types and use fire-and-forget semantics
  // Default: false
  // Example: option (litepb.rpc.is_event) = true;
  bool is_event = 50008;
}

// Custom options for RPC service configuration.
// These extend google.protobuf.ServiceOptions to provide LitePB-specific metadata.
extend google.protobuf.ServiceOptions {
  // service_id is a unique numeric identifier for this service.
  // Required to identify services in the wire protocol and prevent method ID collisions.
  // Must be present and greater than 0. Recommended range: 1-65535.
  // Example: option (litepb.rpc.service_id) = 1;
  uint32 service_id = 50006;
}