#!/bin/bash
#
# LitePB Generator - Self-installing wrapper script
# Manages Python virtual environment and dependencies automatically
#

set -e  # Exit on error

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="${SCRIPT_DIR}/generator/.venv"
REQUIREMENTS_FILE="${SCRIPT_DIR}/generator/requirements.txt"
GENERATOR_SCRIPT="${SCRIPT_DIR}/generator/litepb_gen.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_info() {
    echo -e "${YELLOW}→ $1${NC}"
}

# Check if Python 3 is available
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is not installed"
    echo "Please install Python 3.8 or later"
    exit 1
fi

# Check if protoc is available
if ! command -v protoc &> /dev/null; then
    print_error "protoc compiler not found"
    echo ""
    echo "Please install the Protocol Buffers compiler:"
    echo "  Ubuntu/Debian:  sudo apt-get install protobuf-compiler"
    echo "  macOS:          brew install protobuf"
    echo "  Fedora/RHEL:    sudo dnf install protobuf-compiler"
    echo "  Arch Linux:     sudo pacman -S protobuf"
    echo ""
    echo "Or download from: https://github.com/protocolbuffers/protobuf/releases"
    exit 1
fi

# Create virtual environment if it doesn't exist
if [ ! -d "$VENV_DIR" ]; then
    print_info "Creating Python virtual environment at generator/.venv..."
    python3 -m venv "$VENV_DIR"
    if [ $? -ne 0 ]; then
        print_error "Failed to create virtual environment"
        echo "Please ensure python3-venv is installed:"
        echo "  Ubuntu/Debian: sudo apt-get install python3-venv"
        exit 1
    fi
    print_success "Virtual environment created"
fi

# Activate virtual environment
source "$VENV_DIR/bin/activate"

# Function to check if dependencies are installed
check_dependencies() {
    python -c "import google.protobuf; import jinja2" 2>/dev/null
}

# Install dependencies if needed
if ! check_dependencies; then
    print_info "Installing required Python packages..."
    
    # Upgrade pip first to avoid potential issues
    pip install --upgrade pip > /dev/null 2>&1
    
    # Install requirements (use --no-user for Replit compatibility)
    pip install --no-user -r "$REQUIREMENTS_FILE"
    
    if [ $? -ne 0 ]; then
        print_error "Failed to install Python dependencies"
        echo "Please try manually installing:"
        echo "  source generator/.venv/bin/activate"
        echo "  pip install -r generator/requirements.txt"
        exit 1
    fi
    
    print_success "Dependencies installed successfully"
    
    # Verify installation
    if ! check_dependencies; then
        print_error "Dependencies installed but import test failed"
        exit 1
    fi
fi

# Run the generator with all passed arguments
exec python "$GENERATOR_SCRIPT" "$@"