syntax = "proto3";

// Package declaration
package test.packaging.v1;

// Import RPC options from LitePB
import "litepb/rpc_options.proto";

// Option for Java package (for reference)
option java_package = "com.example.test.packaging";
option java_outer_classname = "PackagingProto";

// Option for Go package
option go_package = "example.com/test/packaging/v1;packagingv1";

// Copy of Color enum from enums.proto to remove cross-folder dependency
enum Color {
    COLOR_UNSPECIFIED = 0;
    COLOR_RED = 1;
    COLOR_GREEN = 2;
    COLOR_BLUE = 3;
}

// Message in package
message PackagedMessage {
    string message_field = 1;
    int32 version = 2;
    
    // Reference to local Color enum
    Color color = 3;
}

// Nested packages simulation through nested messages
message ApiVersion {
    message V1 {
        message Request {
            string query = 1;
        }
        
        message Response {
            string result = 1;
        }
    }
    
    message V2 {
        message Request {
            string query = 1;
            map<string, string> parameters = 2;
        }
        
        message Response {
            string result = 1;
            int32 status_code = 2;
        }
    }
}

// Service definition (for completeness, though we may not generate service code)
service RpcService {
    option (litepb.rpc.service_id) = 1;
    
    rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
        option (litepb.rpc.method_id) = 1;
    }
    rpc UpdateInfo(UpdateInfoRequest) returns (UpdateInfoResponse) {
        option (litepb.rpc.method_id) = 2;
    }
}

message GetInfoRequest {
    string id = 1;
}

message GetInfoResponse {
    string info = 1;
    PackagedMessage details = 2;
}

message UpdateInfoRequest {
    string id = 1;
    string new_info = 2;
}

message UpdateInfoResponse {
    bool success = 1;
    string message = 2;
}

// Enum in package
enum PackagedStatus {
    PACKAGED_STATUS_UNSPECIFIED = 0;
    PACKAGED_STATUS_ACTIVE = 1;
    PACKAGED_STATUS_INACTIVE = 2;
}

// Complex message with package references
message ComplexPackagedMessage {
    PackagedMessage local_message = 1;
    repeated Color external_colors = 2;
    map<string, PackagedStatus> status_map = 3;
    ApiVersion.V2.Request api_request = 4;
    ApiVersion.V2.Response api_response = 5;
}

// Message for RGB color representation (renamed to avoid conflict with enum)
message RGBColor {
    int32 red = 1;
    int32 green = 2;
    int32 blue = 3;
    int32 alpha = 4;
}

// Using both Color types
message ColorTest {
    RGBColor rgb_color = 1;  // References test.packaging.v1.RGBColor
    Color enum_color = 2;  // References test.packaging.v1.Color enum
}