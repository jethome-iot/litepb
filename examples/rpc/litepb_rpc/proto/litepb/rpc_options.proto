syntax = "proto3";

package litepb.rpc;

import "google/protobuf/descriptor.proto";

// Direction defines the allowed communication flow for an RPC method.
// This helps optimize code generation and provides clear API contracts.
//
// NOTE: CLIENT_TO_SERVER and SERVER_TO_CLIENT are directional indicators,
// not architectural roles. In a peer-to-peer system, any peer can use either
// direction. The terms indicate message flow direction:
// - CLIENT_TO_SERVER: from lower address (0x01) to higher address (0x02)
// - SERVER_TO_CLIENT: from higher address (0x02) to lower address (0x01)
// These directions are preserved for backward compatibility with existing
// protobuf definitions while supporting flexible peer-to-peer architectures.
enum Direction {
  // BIDIRECTIONAL allows both peers to initiate the RPC call.
  // Either peer can call this method regardless of their address.
  BIDIRECTIONAL = 0;
  
  // CLIENT_TO_SERVER indicates message flow from lower address to higher address.
  // In peer-to-peer systems, this means from peer with lower address (e.g., 0x01)
  // to peer with higher address (e.g., 0x02). This is the traditional request-response
  // pattern but can be used by any peer playing the "initiator" role.
  CLIENT_TO_SERVER = 1;
  
  // SERVER_TO_CLIENT indicates message flow from higher address to lower address.
  // In peer-to-peer systems, this means from peer with higher address (e.g., 0x02)
  // to peer with lower address (e.g., 0x01). Enables push notifications and
  // reverse-direction communication in peer-to-peer architectures.
  SERVER_TO_CLIENT = 2;
}

// Transport defines the wire protocol used for RPC communication.
// This allows the same service definitions to support multiple implementations.
enum Transport {
  // LIGHTWEIGHT is our custom embedded-friendly protocol.
  // Optimized for low-overhead transports like UART, SPI, and UDP.
  // Uses simple framing: [msg_id:4][method_len:varint][method][payload_len:varint][data]
  LIGHTWEIGHT = 0;
  
  // GRPC enables future HTTP/2 compatible implementation.
  // Useful for cloud integration and standard gRPC toolchain compatibility.
  // When specified, generates stubs compatible with gRPC wire format.
  GRPC = 1;
}

// Custom options for RPC method configuration.
// These extend google.protobuf.MethodOptions to provide LitePB-specific metadata.
extend google.protobuf.MethodOptions {
  // direction specifies which endpoint can initiate this RPC call.
  // Default: BIDIRECTIONAL
  // Example: option (litepb.rpc.direction) = CLIENT_TO_SERVER;
  Direction direction = 50001;
  
  // transport specifies the wire protocol for this RPC method.
  // Default: LIGHTWEIGHT
  // Example: option (litepb.rpc.transport) = LIGHTWEIGHT;
  Transport transport = 50002;
  
  // default_timeout_ms sets the default timeout for this RPC call in milliseconds.
  // Can be overridden per-call at runtime. A value of 0 means no timeout.
  // Default: Implementation-defined (typically 5000ms)
  // Example: option (litepb.rpc.default_timeout_ms) = 3000;
  uint32 default_timeout_ms = 50003;
  
  // method_id is a unique numeric identifier for this RPC method within the service.
  // Required for LIGHTWEIGHT transport to identify methods in the wire protocol.
  // Must be unique within the service. Recommended range: 1-65535.
  // Example: option (litepb.rpc.method_id) = 1;
  uint32 method_id = 50004;
  
  // fire_and_forget marks this RPC as a one-way event (no response expected).
  // When true, the method sends a message without waiting for a response.
  // - No pending call slots are allocated
  // - msg_id is set to 0 in the wire protocol
  // - No callback or timeout handling
  // - Efficient for notifications, telemetry, and event streams
  // Default: false (traditional request-response RPC)
  // Example: option (litepb.rpc.fire_and_forget) = true;
  bool fire_and_forget = 50005;
}

// Custom options for RPC service configuration.
// These extend google.protobuf.ServiceOptions to provide LitePB-specific metadata.
extend google.protobuf.ServiceOptions {
  // service_id is a unique numeric identifier for this service.
  // Required to identify services in the wire protocol and prevent method ID collisions.
  // Must be present and greater than 0. Recommended range: 1-65535.
  // Example: option (litepb.rpc.service_id) = 1;
  uint32 service_id = 50006;
}
