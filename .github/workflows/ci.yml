name: CI

on:
  push:
    branches: ['dev', 'master']
  pull_request:
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Environment
    runs-on: ubuntu-24.04
    outputs:
      container_image: ${{ steps.image.outputs.name }}
    steps:
      - name: Set container image name
        id: image
        run: |
          echo "name=ghcr.io/jethome-iot/litepb-dev:latest" >> $GITHUB_OUTPUT
  
  format-check:
    name: Format Check
    runs-on: ubuntu-24.04
    needs: prepare
    container:
      image: ${{ needs.prepare.outputs.container_image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Run format check
        run: ./scripts/format_check.sh
        
  test:
    name: PlatformIO Tests
    runs-on: ubuntu-24.04
    needs: prepare
    container:
      image: ${{ needs.prepare.outputs.container_image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Run tests
        run: pio test
        
  test-interop:
    name: Test Interop
    runs-on: ubuntu-24.04
    needs: prepare
    container:
      image: ${{ needs.prepare.outputs.container_image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Run interop tests
        run: ./tests/cpp/interop/run_tests.sh
        
  discover-examples:
    name: Discover Examples
    runs-on: ubuntu-24.04
    outputs:
      examples: ${{ steps.find.outputs.examples }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Find examples
        id: find
        run: |
          # Find all platformio.ini files under examples/
          examples=$(find examples -name "platformio.ini" -type f -exec dirname {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "examples=$examples" >> $GITHUB_OUTPUT
          echo "Found examples: $examples"
  
  build-examples:
    name: Build ${{ matrix.example }}
    runs-on: ubuntu-24.04
    needs: [prepare, discover-examples]
    strategy:
      fail-fast: false
      matrix:
        example: ${{ fromJson(needs.discover-examples.outputs.examples) }}
    container:
      image: ${{ needs.prepare.outputs.container_image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Build and test example
        working-directory: ${{ matrix.example }}
        run: |
          echo "Building example: ${{ matrix.example }}"
          
          # Build will fail the job if it fails
          pio run
          
          # Run executables with timeout
          echo "Looking for executables in .pio/build/*/program..."
          for program in .pio/build/*/program; do
            if [ -f "$program" ]; then
              echo "Running executable: $program"
              timeout 10s "$program"
              echo "Execution completed (or timed out after 10s)"
            fi
          done
          
  coverage:
    name: Code Coverage
    runs-on: ubuntu-24.04
    needs: prepare
    container:
      image: ${{ needs.prepare.outputs.container_image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --user root
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Run coverage tests
        run: |
          chmod +x scripts/coverage.sh
          ./scripts/coverage.sh
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: tmp/native_coverage/coverage/coverage_report/
          retention-days: 30
          
      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: tmp/native_coverage/coverage/coverage_filtered.info
          retention-days: 30
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: tmp/native_coverage/coverage/coverage_filtered.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          filter-changed-files: true
